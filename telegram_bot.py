import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_list, as_section, Bold, Text
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from lk_parser import LKParser
import asyncio
import io
from datetime import datetime

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
lk_parser = LKParser()
user_sessions = {}


# ========================
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# ========================
class AuthStates(StatesGroup):
    waiting_credentials = State()


# ========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—ã–Ω–µ—Å–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
# ========================

def get_start_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")],
        ],
        resize_keyboard=True
    )
    return markup


def get_main_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"), KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")],
            [KeyboardButton(text="FAQ"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
        ],
        resize_keyboard=True
    )
    return markup


def get_lk_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )
    return markup


# ========================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# ========================
async def monitor_grades(user_id: int, login: str, password: str):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ü–µ–Ω–∫–∞—Ö"""
    while True:
        try:
            updates = await lk_parser.check_grades_updates(user_id, login, password)
            if updates:
                for diff in updates:
                    await bot.send_message(
                        user_id,
                        f"üîî –ù–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:\n{diff['value']}",
                        reply_markup=get_lk_keyboard()
                    )
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        except Exception as e:
            await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ü–µ–Ω–æ–∫: {str(e)}. –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ª–æ–≥–∏–Ω")
            await asyncio.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ========================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    hello_msg = """
    –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –≤ –õ–ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –ì—É–±–∫–∏–Ω—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.
–ü—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ç—ã –±—É–¥–µ—à—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∏–∑ –õ–ö.
–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.
    """
    await message.answer(hello_msg, reply_markup=get_start_keyboard())


@dp.message(F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")
async def show_agreement(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'"""
    agreement_msg = """
    –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º (—á—Ç–æ–±—ã –±—ã–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞).
–î–æ 30.09.2025 –±–æ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∑–∞—Ç–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–ª–∞—Ç–Ω—É—é –æ—Å–Ω–æ–≤—É.

–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?
1. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
2. –í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–≤–æ–µ–≥–æ –õ–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`

üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î! 
–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –≤ –≤–∞—à –õ–ö.
    """
    await message.answer(agreement_msg, reply_markup=get_main_keyboard())


@dp.message(F.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def start_auth(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(AuthStates.waiting_credentials)
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456:password",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(AuthStates.waiting_credentials, F.text.regexp(r'^\d+:.+$'))
async def process_credentials(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        login, password = message.text.split(":")
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if len(login) == 6:  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            user_sessions[user_id] = {
                'login': login,
                'password': password,
                'task': None
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            user_sessions[user_id]['task'] = asyncio.create_task(
                monitor_grades(user_id, login, password)
            )

            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä, –ø–∞—Ä–æ–ª—å - –æ—Ç 6 —Å–∏–º–≤–æ–ª–æ–≤.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@dp.message(AuthStates.waiting_credentials)
async def wrong_credentials_format(message: Message):
    """–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456:password")


async def send_as_file(user_id: int, data: list):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        text_data = "üìä –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:\n\n"
        for subject in data:
            text_data += f"üìö {subject.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            for grade_type, value in subject.items():
                if grade_type != 'name':
                    text_data += f"  - {grade_type}: {value}\n"
            text_data += "\n"

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        file_buffer = io.BytesIO()
        file_buffer.write(text_data.encode('utf-8'))
        file_buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.send_document(
            chat_id=user_id,
            document=BufferedInputFile(
                file_buffer.read(),
                filename=f"grades_{datetime.now().strftime('%Y-%m-%d')}.txt"
            ),
            caption="–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏"
        )
    except Exception as e:
        await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")


@dp.message(F.text == "–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å")
async def current_grades(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å'"""
    user_id = message.from_user.id

    if user_id not in user_sessions:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!")
        return

    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫
        grades_list = await lk_parser.get_current_grades(
            user_sessions[user_id]['login'],
            user_sessions[user_id]['password']
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(grades_list, list):
            raise ValueError("–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫")

        await send_as_file(message.from_user.id, grades_list)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫: {str(e)}")


@dp.message(Command("stop"))
async def stop_monitoring(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    if user_id in user_sessions:
        if user_sessions[user_id].get('task'):
            user_sessions[user_id]['task'].cancel()
        del user_sessions[user_id]
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")


@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º'"""
    await message.answer(
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ –ø–æ [—Å—Å—ã–ª–∫–µ](t.me/GuTracker_admin)",
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'"""
    await message.answer(
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
        reply_markup=get_lk_keyboard()
    )
@dp.message(F.text == "FAQ")
async def get_faq(message: Message):
    await message.answer(
        "faq",
        reply_markup=get_lk_keyboard()
    )

@dp.message(F.text == "–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
async def subscription_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏'"""
    await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ 30.09.2025")


# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π KeyboardInterrupt
    async def main():
        await dp.start_polling(bot)


    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped")
