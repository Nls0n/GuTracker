import json
import os
import bcrypt
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_list, as_section, Bold, Text
from aiogram.fsm.state import State, StatesGroup
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from lk_parser import LKParser
import asyncio

from datetime import datetime
import logging

logger = logging.getLogger(__name__)
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
lk_parser = LKParser()
user_sessions = {}


# ========================
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# ========================
class AuthStates(StatesGroup):
    waiting_credentials = State()


# ========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—ã–Ω–µ—Å–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
# ========================

def get_start_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")],
        ],
        resize_keyboard=True
    )
    return markup


def get_main_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"), KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")],
            [KeyboardButton(text="FAQ"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
        ],
        resize_keyboard=True
    )
    return markup


def get_lk_keyboard():
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="FAQ")]
        ],
        resize_keyboard=True
    )
    return markup


# ========================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# ========================
async def monitor_grades(user_id: int, login: str, password: str):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ü–µ–Ω–∫–∞—Ö"""
    while True:
        try:
            lk_parser.cursor.execute('''
            UPDATE grades
            SET changed_at = %s
            WHERE telegram_id = %s''', (datetime.now(), user_id))
            updates = await lk_parser.check_grades_updates(user_id, login, password)
            if updates and isinstance(updates, list):
                for diff in updates:
                    await bot.send_message(
                        user_id,
                        f"üîî –ù–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:\n{diff}",
                        reply_markup=get_lk_keyboard()
                    )
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        except Exception as e:
            await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ü–µ–Ω–æ–∫: {str(e)}. –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ª–æ–≥–∏–Ω")
            logger.error(f'–û—à–∏–±–∫–∞ {e}')
            await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ========================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    hello_msg = """
    –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –≤ –õ–ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –ì—É–±–∫–∏–Ω—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.
–ü—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–≥–æ —Ç—ã –±—É–¥–µ—à—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∏–∑ –õ–ö.
–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.
    """
    await message.answer(hello_msg, reply_markup=get_start_keyboard())


@dp.message(F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")
async def show_agreement(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'"""
    agreement_msg = """
    –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º (—á—Ç–æ–±—ã –±—ã–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞).
–ù–∞ –≤—Ä–µ–º—è –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∑–∞—Ç–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–ª–∞—Ç–Ω—É—é –æ—Å–Ω–æ–≤—É.

–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?
1. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
2. –í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–≤–æ–µ–≥–æ –õ–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å`

üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î! 
–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –≤ –≤–∞—à –õ–ö.
    """
    await message.answer(agreement_msg, reply_markup=get_main_keyboard())


@dp.message(F.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def start_auth(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(AuthStates.waiting_credentials)
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456:password",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(AuthStates.waiting_credentials, F.text.regexp(r'^\d+:.+$'))
async def process_credentials(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await message.answer('–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
        login, password = message.text.split(":")
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        is_correct = await lk_parser.test_credentials(login, password)
        if len(login) == 6 and is_correct:
            salt = bcrypt.gensalt()
            hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ users
            lk_parser.cursor.execute('''
                INSERT INTO users (telegram_id, login, password)
                VALUES (%s, %s, %s)
                ON CONFLICT (telegram_id) 
                DO UPDATE SET 
                    login = EXCLUDED.login,
                    password = EXCLUDED.password
            ''', (user_id, login, hashed))

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏
            grades = await lk_parser.get_current_grades(login, password)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ grades
            lk_parser.cursor.execute('''
                INSERT INTO grades (telegram_id, data)
                VALUES (%s, %s)
            ''', (user_id, json.dumps(grades)))

            lk_parser.conn.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            user_sessions[user_id] = {
                'login': login,
                'password': password,
                'task': asyncio.create_task(
                    monitor_grades(user_id, login, password)
                )
            }

            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f'–û—à–∏–±–∫–∞ {e}')
        lk_parser.conn.rollback()
    finally:
        await state.clear()

@dp.message(AuthStates.waiting_credentials)
async def wrong_credentials_format(message: Message):
    """–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456:password")


@dp.message(F.text == "–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å")
async def current_grades(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å–µ–π—á–∞—Å'"""
    user_id = message.from_user.id

    if user_id not in user_sessions:
        await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return

    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        lk_parser.cursor.execute('''
            SELECT data FROM grades
            WHERE telegram_id = %s
            ORDER BY changed_at DESC
            LIMIT 1
        ''', (user_id,))

        result = lk_parser.cursor.fetchone()[0]
        if not result:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")
            return

        grades_data = result  # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        lk_parser.cursor.execute('''
                    SELECT changed_at FROM grades
                    WHERE telegram_id = %s
                    ORDER BY changed_at DESC
                    LIMIT 1
                ''', (user_id,))
        result = lk_parser.cursor.fetchone()[0]
        date_time = result
        if not isinstance(grades_data, list):
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        formatted_messages = format_grades_data(grades_data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
        for msg in formatted_messages:
            await message.answer(msg, parse_mode="HTML")
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç {datetime.strftime(date_time,'%d.%m.%Y - %H:%M')}")

    except Exception as e:
        error_msg = str(e)
        logger.error(f'–û—à–∏–±–∫–∞ {e}')
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ü–µ–Ω–æ–∫:\n<code>{error_msg[:1000]}</code>",
            parse_mode="HTML"
        )


def format_grades_data(grades: list) -> list[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    messages = []
    current_msg = ""

    for subject in grades:
        if not isinstance(subject, dict):
            continue

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–µ—Ä–≤—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ "–†–∞–±–æ—Ç—ã")
        subject_name = next(
            (key for key in subject.keys() if key != "–†–∞–±–æ—Ç—ã"),
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        )
        total_score = subject.get(subject_name, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_block = (
            f"<b>‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</b>\n"
            f"<b>üìö {subject_name}</b>\n"
            f"<b>üî∏ –ò—Ç–æ–≥–æ:</b> <code>{str(total_score)}</code>\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã
        works = subject.get("–†–∞–±–æ—Ç—ã", [])
        if works and isinstance(works, list):
            subject_block += "<b>üìù –†–∞–±–æ—Ç—ã:</b>\n"
            for i, work in enumerate(works, 1):
                if not isinstance(work, str):
                    continue

                # –û—á–∏—â–∞–µ–º –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã
                work_clean = work.replace('\n', ' ').replace('  ', ' ')

                # –†–∞–∑–¥–µ–ª—è–µ–º –±–∞–ª–ª—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                if ' –∑–∞ ' in work_clean:
                    points, desc = work_clean.split(' –∑–∞ ', 1)
                    subject_block += f"{i}. <code>{points.strip()}</code>\n   –∑–∞ {desc.strip()}\n"
                else:
                    subject_block += f"{i}. {work_clean}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –ª–∏–º–∏—Ç
        if len(current_msg) + len(subject_block) > 4000:
            messages.append(current_msg)
            current_msg = subject_block
        else:
            current_msg += "\n" + subject_block if current_msg else subject_block

    if current_msg:
        messages.append(current_msg)

    return messages or ["‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"]


@dp.message(Command("stop"))
async def stop_monitoring(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    if user_id in user_sessions:
        if user_sessions[user_id].get('task'):
            user_sessions[user_id]['task'].cancel()
        del user_sessions[user_id]
        await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")


@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º'"""
    await message.answer(
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –º–æ–∂–Ω–æ –ø–æ [—Å—Å—ã–ª–∫–µ](t.me/GuTracker_admin)",
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'"""
    await message.answer(
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
        reply_markup=get_lk_keyboard()
    )
@dp.message(F.text == "FAQ")
async def get_faq(message: Message):
    faq_msg = """*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*
*1. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?*
    
_–û–∫–æ–ª–æ –º–µ—Å—è—Ü–∞, –≤–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ_
    
*2. –°–µ—Ä–≤–∏—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?*
    
_–ù–∞ –≤—Ä–µ–º—è –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–∞.
–ó–∞—Ç–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –æ—Å–Ω–æ–≤—É –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–∫–∏,
–∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ.
–ü—Ä–æ—Å—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–∞–Ω–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–∞–∫(_
    
*3. –ö–∞–∫–∞—è –±—É–¥–µ—Ç —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏?*
    
_–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–∞–π–æ–Ω–µ 69 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü_
    
*4. –ë–µ–∑–æ–ø–∞—Å–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å? –ú–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö?*
   
_–î–∞, —Å–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è
–≤ –ë–î –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, —Ç–∞–∫ —á—Ç–æ –Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫,
–Ω–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –Ω–µ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ,
–¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –≤–∑–ª–æ–º–∞_
    
*5. –ö—Ç–æ –∞–≤—Ç–æ—Ä?*
    
_–ê–≤—Ç–æ—Ä —Ö–æ—Ç–µ–ª –±—ã –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º)_
    
*6. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ú–æ–∂–Ω–æ –ª–∏ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º?*
    
_–ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, 
—Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ –∞–¥–º–∏–Ω—É.
–í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º,
–ø–∏—à–∏ –∞–¥–º–∏–Ω—É –∏ —Ä–∞–∑–±–∏—Ä–∞–π—Ç–µ—Å—å, –∫ —Ä–µ–ª–∏–∑—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥
–ø—Ä–∞–≤–∏–ª, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∑–º–æ–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤._
"""
    await message.answer(
        faq_msg,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_lk_keyboard()
    )

@dp.message(F.text == "–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
async def subscription_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å –º–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏'"""
    await message.answer("**–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**",
                         parse_mode=ParseMode.MARKDOWN,
                         reply_markup=get_lk_keyboard())


# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π KeyboardInterrupt
    async def main():
        await dp.start_polling(bot)


    try:
        ChromeDriverManager().install()
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped")
