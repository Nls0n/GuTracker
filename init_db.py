import os
from dotenv import load_dotenv
import psycopg2

load_dotenv()


def init_database():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = psycopg2.connect(
            host=os.getenv("HOST"),
            dbname=os.getenv("DB_NAME"),
            user=os.getenv("USER"),
            password=os.getenv("DB_PASSWORD")
        )
        conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º autocommit –¥–ª—è DDL –∫–æ–º–∞–Ω–¥
        cur = conn.cursor()

        print("‚úÖ Connected to database")

        # 1. –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ foreign keys)
        cur.execute("DROP TABLE IF EXISTS grades;")
        cur.execute("DROP TABLE IF EXISTS users;")
        print("‚úÖ Dropped existing tables")

        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        cur.execute("""
            CREATE TABLE users (
                telegram_id bigint NOT NULL PRIMARY KEY,
                login text NOT NULL,
                password text NOT NULL,
                last_change timestamp without time zone,
                created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
            );
        """)
        print("‚úÖ Created users table")

        # 3. –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è grades
        cur.execute("DROP SEQUENCE IF EXISTS grades_id_seq;")
        cur.execute("CREATE SEQUENCE grades_id_seq;")
        print("‚úÖ Created sequence")

        # 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É grades
        cur.execute("""
            CREATE TABLE grades (
                id integer NOT NULL DEFAULT nextval('grades_id_seq'),
                telegram_id bigint,
                data jsonb NOT NULL,
                changed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT grades_pkey PRIMARY KEY (id),
                CONSTRAINT grades_telegram_id_fkey FOREIGN KEY (telegram_id)
                    REFERENCES users (telegram_id)
                    ON DELETE CASCADE
            );
        """)
        print("‚úÖ Created grades table")

        # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –û–¢–î–ï–õ–¨–ù–´–ú–ò –∫–æ–º–∞–Ω–¥–∞–º–∏
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_grades_changed_at 
            ON grades USING btree (changed_at DESC NULLS FIRST);
        """)

        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_grades_telegram_id 
            ON grades USING btree (telegram_id ASC NULLS LAST);
        """)
        print("‚úÖ Created indexes")

        # 6. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cur.execute("""
            CREATE OR REPLACE FUNCTION update_user_last_change()
            RETURNS TRIGGER AS $$
            BEGIN
                UPDATE users 
                SET last_change = CURRENT_TIMESTAMP 
                WHERE telegram_id = NEW.telegram_id;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """)
        print("‚úÖ Created trigger function")

        # 7. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        cur.execute("""
            DROP TRIGGER IF EXISTS grades_update_trigger ON grades;
            CREATE TRIGGER grades_update_trigger
                AFTER INSERT OR UPDATE 
                ON grades
                FOR EACH ROW
                EXECUTE FUNCTION update_user_last_change();
        """)
        print("‚úÖ Created trigger")

        print("üéâ Database initialization completed successfully!")

    except psycopg2.Error as e:
        print(f"‚ùå Database error: {e}")
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        raise
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()
        print("‚úÖ Database connection closed")


if __name__ == "__main__":
    init_database()